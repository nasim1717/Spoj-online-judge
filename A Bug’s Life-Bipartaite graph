#include<bits/stdc++.h>
using namespace std;
vector<int>ve[30000];
int visit[30000],col[30000];
bool dfs(int node, int c){
    visit[node]=1;
    col[node]=c;
    for(auto child:ve[node]){
        if(visit[child]==0){
            bool res = dfs(child,c^1);
            if(res==false)
                return false;
        }
        else{
            if(col[node]==col[child])
                return false;
        }
    }
    return true;
}
int main(){
    int tc,i,n,m,u,v,j;
    cin>>tc;
    for(i=1; i<=tc; i++){
        cin>>n>>m;
        for(int a=1; a<=n; a++)
            ve[a].clear(),visit[a]=0,col[a]=0;
        for(j=1; j<=m; j++){
            cin>>u>>v, ve[u].push_back(v),ve[v].push_back(u);
        }
        bool res,flag=true;
        for(j=1; j<=n; j++){
            if(visit[j]==0)
                res = dfs(j,0);
            if(res==false)
                flag=false;
        }
        printf("Scenario #%d:\n",i);
        if(flag==false)
            printf("Suspicious bugs found!\n");
        else if (flag==true)
            printf("No suspicious bugs found!\n");
    }
return 0;
}
